name: .NET .Core Main Branch Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:  
  tag_version:
    runs-on: ubuntu-latest

    steps:
      # By default, fetch-depth=1, which is what's needed for tagging
      - uses: actions/checkout@v4

      - name: Read Version from version.txt
        id: read-version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Tag the new version
        run: git tag ${{ env.VERSION }}

      - name: Configure Git
        run: |
          git config user.email "our-github-action-bot@users.noreply.github.com"
          git config user.name "GitHub Actions Bot"

      # Uses '--force' to overwrite existing tag in case of repeated push of the same tag e.g. after a quick fix
      - name: Push changes
        run: |
          git push --force origin ${{ env.VERSION }}
  
  build_and_test:
    needs: tag_version
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # wait with Release_Android
        build_config: [ Release_Desktop, Release_Android ]

    env:
      # Reducing caching size: Some action runners already have huge libraries. This replaces OS-default of '~/.nuget/packages'
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET Environment
        id: setup-dotnet
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Cache dotnet SDK and Workloads
        id: cache-dotnet
        uses: actions/cache@v4
        env:
          cache-name: cache-dotnet
        with:
          path: /usr/share/dotnet
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('global.json') }}
        
      - name: Check cache-dotnet hit
        if: steps.cache-dotnet.outputs.cache-hit == 'true'
        run: echo "There was a cache-hit for restoring dotnet SDK & Workload dependencies."

      - name: Generate hash for Nuget Cache (excluding irrelevant .csproj files)
        run: |
          if [[ "${{ matrix.build_config }}" == "Release_Desktop" ]]; then
            HASH=$(find . -iname '*.csproj' ! -iname '*ios*' ! -iname '*android*' -exec cat {} + | shasum -a 256 | awk '{print $1}')
          elif [[ "${{ matrix.build_config }}" == "Release_Android" ]]; then
            HASH=$(find . -iname '*.csproj' ! -iname '*ios*' ! -iname '*desktop*' ! -iname '*browser*' -exec cat {} + | shasum -a 256 | awk '{print $1}')
          else
            HASH=$(find . -iname '*.csproj' ! -iname '*ios*' -exec cat {} + | shasum -a 256 | awk '{print $1}')
          fi
          echo "CS_PROJ_HASH=$HASH" >> $GITHUB_ENV
        shell: bash
      
      - name: Cache nuget dependencies
        id: cache-nuget
        uses: actions/cache@v4
        env:
          cache-name: cache-nuget-${{ matrix.build_config }}
        with:
          path: ${{ github.workspace }}/.nuget
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.CS_PROJ_HASH }}

      - name: Check cache-nuget hit
        if: steps.cache-nuget.outputs.cache-hit == 'true'
        run: echo "There was a cache-hit for restoring nuget dependencies for ${{ matrix.build_config }}."

      # Installing all needed workloads irrespective of current build_config because of a single cache for 'dotnet'
      - name: Install Workloads
        run: dotnet workload install wasm-tools android
        
      - name: Restore dependencies
        run: dotnet restore /p:Configuration=${{ matrix.build_config }}

      - name: Build
        run: dotnet build --configuration ${{ matrix.build_config }} --no-restore

      - name: Test
        run: dotnet test --no-build --configuration ${{ matrix.build_config }} --verbosity normal

#  deploy: