name: .NET .Core Main Branch Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:  
  tag_version:
    runs-on: ubuntu-latest

    steps:
      # By default, fetch-depth=1, which is what's needed for tagging
      - uses: actions/checkout@v4

      - name: Read Version from version.txt
        id: read-version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Tag the new version
        run: git tag ${{ env.VERSION }}

      - name: Configure Git
        run: |
          git config user.email "our-github-action-bot@users.noreply.github.com"
          git config user.name "GitHub Actions Bot"
          
      # Uses '--force' to overwrite existing tag in case of repeated push of the same tag e.g. after a quick fix
      - name: Push changes
        run: |
          git push --force origin ${{ env.VERSION }}
  
  build_test_and_deploy:
    needs: tag_version
    runs-on: ubuntu-latest

    services: 
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ vars.PG_SUPER_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PG_SUPER_USER_PSW }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    strategy:
      matrix:
        toplevel_project: [ "${{ vars.CHATBOT_TOPLEVEL_PROJECT }}" ]
#                           "${{ vars.DESKTOP_TOPLEVEL_PROJECT }}", 
#                           "${{ vars.ANDROID_TOPLEVEL_PROJECT }}"]

    env:
      # Reducing caching size: Some action runners already have huge libraries. This replaces OS-default of '~/.nuget/packages'
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

    steps:
      - uses: actions/checkout@v4

      - name: Make all scripts executable
        run: chmod -R +x ${{ vars.DEVOPS_EXE_SCRIPTS_DIR }}
        
      - name: Check installed Bash version
        run: bash --version
        
      - name: Create Google API credentials file
        env:
          GOOGLE_API_CREDENTIAL_FILE_CONTENT: ${{ secrets.GOOGLE_API_CREDENTIAL_FILE_CONTENT }}
          GOOGLE_API_CREDENTIAL_FILE: ${{ vars.GOOGLE_API_CREDENTIAL_FILE }}
        run: |
            echo "$GOOGLE_API_CREDENTIAL_FILE_CONTENT" > ~/$GOOGLE_API_CREDENTIAL_FILE
            
# Setting up Caches ----------------------------

      # NOT Caching dotnet SDK & Workloads at this point, see notes in 'parked_workflows.txt'
      
      # dotnet Nuget (solution_config specific) --------------
      
      - name: Generate hash for Nuget Cache (excluding irrelevant .csproj files)
        run: |
          if [[ "${{ matrix.toplevel_project }}" == "${{ vars.DESKTOP_TOPLEVEL_PROJECT }}" ]]; then
            HASH=$(find . -iname '*.csproj' ! -iname '*mobile*' ! -iname '*chatbot*' -exec cat {} + | shasum -a 256 | awk '{print $1}')
          elif [[ "${{ matrix.toplevel_project }}" == "${{ vars.ANDROID_TOPLEVEL_PROJECT }}" ]]; then
            HASH=$(find . -iname '*.csproj' ! -iname '*ios*' ! -iname '*desktop*' ! -iname '*chatbot*' -exec cat {} + | shasum -a 256 | awk '{print $1}')
          elif [[ "${{ matrix.toplevel_project }}" == "${{ vars.CHATBOT_TOPLEVEL_PROJECT }}" ]]; then
            HASH=$(find . -iname '*.csproj' ! -iname '*mobile*' ! -iname '*desktop*' -exec cat {} + | shasum -a 256 | awk '{print $1}')
          else
            echo "Error: The current toplevel_project is not handled for hash generation."
            echo "CS_PROJ_HASH=error" >> $GITHUB_ENV
            exit 1
          fi
          echo "CS_PROJ_HASH=$HASH" >> $GITHUB_ENV
        shell: bash
      
      - name: Cache nuget dependencies
        id: cache-nuget
        uses: actions/cache@v4
        env:
          cache-name: cache-nuget-${{ matrix.toplevel_project }}
        with:
          path: ${{ github.workspace }}/.nuget
          key: "${{ runner.os }}-build-${{ env.cache-name }}-${{ env.CS_PROJ_HASH }}"

      - name: Check cache-nuget hit
        if: steps.cache-nuget.outputs.cache-hit == 'true'
        run: echo "There was a cache-hit for restoring nuget dependencies for ${{ matrix.toplevel_project }}."
        
      # NOT Caching Android SDK at this point, see notes in 'parked_workflows.txt'

# Installing SDKs and Frameworks ----------------------------

      - name: Setup .NET Environment
        id: setup-dotnet
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Set up JDK 17
        if: matrix.toplevel_project == vars.ANDROID_TOPLEVEL_PROJECT
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        if: matrix.toplevel_project == vars.ANDROID_TOPLEVEL_PROJECT
        uses: android-actions/setup-android@v3
      
      # Installing all needed workloads irrespective of ANDROID vs. DESKTOP distinction:
      # A single cache is used for 'dotnet' b/c it's too hard to specify workload-specific sub-paths for caching
      - name: Install Workloads
        if: ${{ matrix.toplevel_project == vars.ANDROID_TOPLEVEL_PROJECT || 
          matrix.toplevel_project == vars.DESKTOP_TOPLEVEL_PROJECT }}
        run: dotnet workload install wasm-tools android
        
# Build & Test ----------------------------

      # Based on the TOPLEVEL_PROJECT (see matrix strategy) currently processed here, these scripts determine
      # the paths for build output, project dir, project file, test project file etc. by extracting them from .sln file
      # This allows us to keep the build/test commands below generic and use explicit build-output dirs for deployment. 
      # All of this relies on implicit project naming conventions in the CheckMade solution:
      # E.g. if toplevel project is CheckMade.ChatBot.Function then test project is assumed to start with CheckMade.ChatBot
      # and to end with 'Tests' (with other possible parts in the middle).
      
      - name: Set Build & Output Parameters
        run: |
          SLN_FILE=$(find . -name '*.sln')
          echo "SLN_FILE: $SLN_FILE"
          
          TOPLEVEL_PROJECT_DEFINITION_LINE=$(grep "Project(\"" $SLN_FILE | grep "${{ matrix.toplevel_project }}" | grep ".csproj")
          echo "TOPLEVEL_PROJECT_DEFINITION_LINE: $TOPLEVEL_PROJECT_DEFINITION_LINE"
          
          TOPLEVEL_PROJECT_DIR=$(echo "$TOPLEVEL_PROJECT_DEFINITION_LINE" | awk -F', ' '{print $2}' | tr -d '"' | sed 's/\\/\//g' | sed 's/\/[^/]*$//')
          echo "TOPLEVEL_PROJECT_DIR: $TOPLEVEL_PROJECT_DIR"
          echo "TOPLEVEL_PROJECT_DIR=$TOPLEVEL_PROJECT_DIR" >> $GITHUB_ENV
          
          TOPLEVEL_PROJECT_FILE=$(echo "$TOPLEVEL_PROJECT_DEFINITION_LINE" | awk -F', ' '{print $2}' | tr -d '"' | sed 's/\\/\//g')
          echo "TOPLEVEL_PROJECT_FILE: $TOPLEVEL_PROJECT_FILE"
          echo "TOPLEVEL_PROJECT_FILE=$TOPLEVEL_PROJECT_FILE" >> $GITHUB_ENV
          
          TARGET_FRAMEWORK=$(cat Directory.Build.props | grep '<TargetFramework>' | \
          sed -n 's/.*<TargetFramework>\(.*\)<\/TargetFramework>.*/\1/p')
          echo "TARGET_FRAMEWORK: $TARGET_FRAMEWORK"
          
          BUILD_OUTPUT_PATH="$TOPLEVEL_PROJECT_DIR/bin/Release/$TARGET_FRAMEWORK/"
          echo "BUILD_OUTPUT_PATH: $BUILD_OUTPUT_PATH"
          echo "BUILD_OUTPUT_PATH=$BUILD_OUTPUT_PATH" >> $GITHUB_ENV
      
      # Re OUTPUT path: even if it's the default output path, need it explicit for deployment step further down!
      - name: Build
        run: dotnet build ${{ env.TOPLEVEL_PROJECT_FILE }} --configuration Release --output ${{ env.BUILD_OUTPUT_PATH }}

      - name: Set up PostgreSQL DB and User
        run: |
          psql -h localhost -U $PG_SUPER_USER -c "CREATE DATABASE $PG_DB_NAME;"
          ./${{ vars.DEVOPS_EXE_SCRIPTS_DIR }}/setup/db/all_host_env/db_app_user_setup.sh CI
          psql -h localhost -U $PG_SUPER_USER -l
        env:
          PG_DB_NAME: ${{ vars.PG_DB_NAME }}
          PG_SUPER_USER: ${{ vars.PG_SUPER_USER }}
          PGPASSWORD: ${{ secrets.PG_SUPER_USER_PSW }} # PGPASSWORD is automatically used by psql
          PG_APP_USER: ${{ vars.PG_APP_USER }}
          PG_APP_USER_PSW: ${{ secrets.PG_APP_USER_PSW }}
      
      - name: Apply Database Migrations
        run: ./${{ vars.DEVOPS_EXE_SCRIPTS_DIR }}/setup/db/all_host_env/apply_migrations.sh CI
        env:
          PG_DB_NAME: ${{ vars.PG_DB_NAME }}
          PG_SUPER_USER: ${{ vars.PG_SUPER_USER }}
          PGPASSWORD: ${{ secrets.PG_SUPER_USER_PSW }} # PGPASSWORD is automatically used by psql
      
      - name: Test
#        Currently only running unit tests b/c of mysterious xUnit fatal crashes on some integration tests 
        run: dotnet test Src/CheckMade.Tests/CheckMade.Tests.csproj --configuration Release --verbosity minimal --filter FullyQualifiedName~CheckMade.Tests.Unit
        env:
          HOSTING_ENVIRONMENT: 'CI'
          PG_DB_CONNSTRING: ${{ secrets.PG_DB_CONNSTRING }}
          FOR_TESTS_AND_DEVOPS_PG_PRD_DB_CONNSTRING: ${{ secrets.FOR_TESTS_AND_DEVOPS_PG_PRD_DB_CONNSTRING }}
          GOOGLE_SHEET_ID_TEST_DATA: '1b6AHy35omBwmUsMNIfRjRIEJ__4YxLnNwviz8h8287I'
          GOOGLE_API_CREDENTIAL_FILE: ${{ vars.GOOGLE_API_CREDENTIAL_FILE }}
          BlobContainerClientUri: 'https://storagewgypo.blob.core.windows.net/checkmade'
          BlobContainerClientAccountName: 'storagewgypo'
          BlobContainerClientAccountKey: ${{ secrets.BLOB_CONTAINER_CLIENT_ACCOUNT_KEY }}
            
      #  Deploy ---------------------------------

      - name: Deploy ChatBot Function to Azure
        if: ${{ matrix.toplevel_project == vars.CHATBOT_TOPLEVEL_PROJECT }}
        uses: Azure/functions-action@v1
        with:
          app-name: 'chatbot-yjr87'
          slot-name: 'staging'
          package: ${{ env.BUILD_OUTPUT_PATH }}
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_CHATBOT_YJR87 }}
          