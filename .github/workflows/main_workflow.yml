name: .NET .Core Main Branch Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:  
  tag_version:
    runs-on: ubuntu-latest

    steps:
      # By default, fetch-depth=1, which is what's needed for tagging
      - uses: actions/checkout@v4

      - name: Read Version from version.txt
        id: read-version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Tag the new version
        run: git tag ${{ env.VERSION }}

      - name: Configure Git
        run: |
          git config user.email "our-github-action-bot@users.noreply.github.com"
          git config user.name "GitHub Actions Bot"
          
      # Uses '--force' to overwrite existing tag in case of repeated push of the same tag e.g. after a quick fix
      - name: Push changes
        run: |
          git push --force origin ${{ env.VERSION }}
  
  build_test_and_deploy:
    needs: tag_version
    runs-on: ubuntu-latest

    strategy:
      matrix:
        solution_config: [ "${{ vars.RELEASE_CONFIG_NAME_TELEGRAM }}" ]
#                           "${{ vars.RELEASE_CONFIG_NAME_DESKTOP }}", 
#                           "${{ vars.RELEASE_CONFIG_NAME_ANDROID }}"]

    env:
      # Reducing caching size: Some action runners already have huge libraries. This replaces OS-default of '~/.nuget/packages'
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

    steps:
      - uses: actions/checkout@v4
      
# Setting up Caches ----------------------------

      # dotnet SDK & Workloads --------------
      
      - name: Cache dotnet SDK and Workloads
        id: cache-dotnet
        uses: actions/cache@v4
        env:
          # Using the solution_config as part of the cache-name to avoid multiple matrix jobs running in parallel 
          # clashing while attempting to form the same cache. See: https://chat.openai.com/share/a7768546-58f8-4f4f-9de5-07a6153495c4
          cache-name: cache-dotnet-${{ matrix.solution_config }}
        with:
          path: /usr/share/dotnet
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('global.json') }}
        
      - name: Check cache-dotnet hit
        if: steps.cache-dotnet.outputs.cache-hit == 'true'
        run: echo "There was a cache-hit for restoring dotnet SDK & Workload dependencies."

      # dotnet Nuget (solution_config specific) --------------
      
      - name: Generate hash for Nuget Cache (excluding irrelevant .csproj files)
        run: |
          if [[ "${{ matrix.solution_config }}" == "${{ vars.RELEASE_CONFIG_NAME_DESKTOP }}" ]]; then
            HASH=$(find . -iname '*.csproj' ! -iname '*mobile*' ! -iname '*chat*' -exec cat {} + | shasum -a 256 | awk '{print $1}')
          elif [[ "${{ matrix.solution_config }}" == "${{ vars.RELEASE_CONFIG_NAME_ANDROID }}" ]]; then
            HASH=$(find . -iname '*.csproj' ! -iname '*ios*' ! -iname '*desktop*' ! -iname '*chat*' -exec cat {} + | shasum -a 256 | awk '{print $1}')
          elif [[ "${{ matrix.solution_config }}" == "${{ vars.RELEASE_CONFIG_NAME_TELEGRAM }}" ]]; then
            HASH=$(find . -iname '*.csproj' ! -iname '*mobile*' ! -iname '*desktop*' -exec cat {} + | shasum -a 256 | awk '{print $1}')
          else
            echo "Error: The current solution_config is not handled for hash generation."
            echo "CS_PROJ_HASH=error" >> $GITHUB_ENV
            exit 1
          fi
          echo "CS_PROJ_HASH=$HASH" >> $GITHUB_ENV
        shell: bash
      
      - name: Cache nuget dependencies
        id: cache-nuget
        uses: actions/cache@v4
        env:
          cache-name: cache-nuget-${{ matrix.solution_config }}
        with:
          path: ${{ github.workspace }}/.nuget
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.CS_PROJ_HASH }}

      - name: Check cache-nuget hit
        if: steps.cache-nuget.outputs.cache-hit == 'true'
        run: echo "There was a cache-hit for restoring nuget dependencies for ${{ matrix.solution_config }}."
        
      # NOT Caching Android SDK at this point, see notes in 'parked_workflows.txt'

# Installing SDKs and Frameworks ----------------------------

      - name: Setup .NET Environment
        id: setup-dotnet
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Set up JDK 17
        if: matrix.solution_config == vars.RELEASE_CONFIG_NAME_ANDROID
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        if: matrix.solution_config == vars.RELEASE_CONFIG_NAME_ANDROID
        uses: android-actions/setup-android@v3
      
      # Installing all needed workloads irrespective of ANDROID vs. DESKTOP distinction:
      # A single cache is used for 'dotnet' b/c it's too hard to specify workload-specific sub-paths for caching
      - name: Install Workloads
        if: ${{ matrix.solution_config == vars.RELEASE_CONFIG_NAME_ANDROID || 
          matrix.solution_config == vars.RELEASE_CONFIG_NAME_DESKTOP }}
        run: dotnet workload install wasm-tools android
        
# Build & Test ----------------------------

      - name: Determine Build-Output-Path from Solution Configuration
        run: |
          SLN_FILE=$(find . -name '*.sln')
          echo "SLN_FILE: $SLN_FILE"
          
          TARGET_FRAMEWORK=$(cat Directory.Build.props | grep '<TargetFramework>' | \
            sed -n 's/.*<TargetFramework>\(.*\)<\/TargetFramework>.*/\1/p')
          echo "TARGET_FRAMEWORK: $TARGET_FRAMEWORK"
          
          DEPLOYMENT_PROJECT_TO_SOLUTION_CONFIG_MATCH_LINE=$(grep -P "${{ matrix.solution_config }}.*Deploy.0" $SLN_FILE)
          echo "DEPLOYMENT_PROJECT_TO_SOLUTION_CONFIG_MATCH_LINE: $DEPLOYMENT_PROJECT_TO_SOLUTION_CONFIG_MATCH_LINE"
          
          DEPLOYMENT_PROJECT_ID=$(echo "$DEPLOYMENT_PROJECT_TO_SOLUTION_CONFIG_MATCH_LINE" | grep -oP "{\K[0-9A-F\-]*(?=})")
          echo "DEPLOYMENT_PROJECT_ID: $DEPLOYMENT_PROJECT_ID"
          
          DEPLOYMENT_PROJECT_DEFINITION_LINE=$(grep "$DEPLOYMENT_PROJECT_ID" $SLN_FILE | grep "Project(")
          echo "DEPLOYMENT_PROJECT_DEFINITION_LINE: $DEPLOYMENT_PROJECT_DEFINITION_LINE"
          
          DEPLOYMENT_PROJECT_NAME=$(echo "$DEPLOYMENT_PROJECT_DEFINITION_LINE" | grep -oP '(?<= = ")[^"]*')
          echo "DEPLOYMENT_PROJECT_NAME: $DEPLOYMENT_PROJECT_NAME"
          
          BUILD_OUTPUT_PATH="Src/$DEPLOYMENT_PROJECT_NAME/bin/${{ matrix.solution_config }}/$TARGET_FRAMEWORK/"
          echo "BUILD_OUTPUT_PATH: $BUILD_OUTPUT_PATH"
          
          echo "BUILD_OUTPUT_PATH=$BUILD_OUTPUT_PATH" >> $GITHUB_ENV
      
#      - name: Restore dependencies
#        run: dotnet restore /p:Configuration=${{ matrix.solution_config }}
#
#      - name: Build & Test
#        run: dotnet test --configuration ${{ matrix.solution_config }} \
#          --no-restore \
#          --output $BUILD_OUTPUT_PATH \
#          --verbosity normal
#
##  Deploy ---------------------------------
#      
#      - name: Deploy Telegram Function to Azure
#        if: ${{ matrix.solution_config == vars.RELEASE_CONFIG_NAME_TELEGRAM }}
#        uses: Azure/functions-action@v1
#        with:
#          app-name: 'telegram-app3'
#          slot-name: 'production'
#          package: $BUILD_OUTPUT_PATH
#          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_TELEGRAM_APP3 }}
          