29/04/2024: Took out this manual setup of dotnet SDK caching because it didn't work. Lack of permissions on GH Runner for the
/usr/share/dotnet path which is a system path. But I can also not use the 'with cache' option of the setup-dotnet 
action, because that expects the usage of packages.lock.json for dependencies (which I don't use).  
The .NET SDK install itself is fast enough to not having to worry about it pre mobile app dev. This might be different
with the huge workloads (android and wasm), but I'll worry about that when it becomes relevant!

      # dotnet SDK & Workloads --------------
      
      - name: Cache dotnet SDK and Workloads
        id: cache-dotnet
        uses: actions/cache@v4
        env:
          # Using the solution_config as part of the cache-name to avoid multiple matrix jobs running in parallel 
          # clashing while attempting to form the same cache. See: https://chat.openai.com/share/a7768546-58f8-4f4f-9de5-07a6153495c4
          cache-name: cache-dotnet-${{ matrix.toplevel_project }}
        with:
          path: /usr/share/dotnet
          key: "${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('global.json') }}"
        
      - name: Check cache-dotnet hit
        if: steps.cache-dotnet.outputs.cache-hit == 'true'
        run: echo "There was a cache-hit for restoring dotnet SDK & Workload dependencies."


20/03/2025 This code included ANDROID toplevel project which has been removed from main workflow 

      # dotnet Nuget (solution_config specific) --------------
      
      - name: Generate hash for Nuget Cache (excluding irrelevant .csproj files)
        run: |
          if [[ "${{ matrix.toplevel_project }}" == "${{ vars.DESKTOP_TOPLEVEL_PROJECT }}" ]]; then
            HASH=$(find . -iname '*.csproj' ! -iname '*mobile*' ! -iname '*chatbot*' -exec cat {} + | shasum -a 256 | awk '{print $1}')
          elif [[ "${{ matrix.toplevel_project }}" == "${{ vars.ANDROID_TOPLEVEL_PROJECT }}" ]]; then
            HASH=$(find . -iname '*.csproj' ! -iname '*ios*' ! -iname '*desktop*' ! -iname '*chatbot*' -exec cat {} + | shasum -a 256 | awk '{print $1}')
          elif [[ "${{ matrix.toplevel_project }}" == "${{ vars.CHATBOT_TOPLEVEL_PROJECT }}" ]]; then
            HASH=$(find . -iname '*.csproj' ! -iname '*mobile*' ! -iname '*desktop*' -exec cat {} + | shasum -a 256 | awk '{print $1}')
          else
            echo "Error: The current toplevel_project is not handled for hash generation."
            echo "CS_PROJ_HASH=error" >> $GITHUB_ENV
            exit 1
          fi
          echo "CS_PROJ_HASH=$HASH" >> $GITHUB_ENV
        shell: bash


Not using Caching for the Android SDK:
Installing the SDK takes less than 30sec but the compression of the 100k+ files of that SDK takes many minutes.
=> It's not worth the overhead of caching since GitHub Runner time is the main bottleneck to watch. 
See this discussion: https://chat.openai.com/share/4d72343c-e32c-40a4-8174-2a981ceaebe6

But in case I do want to reactivate Android SDK caching in the future, this was the code. 
The main thing that took figuring out was 'path' and 'key'.

      # Android SDK --------------
      
      - name: Cache Android SDK
        if: ${{ matrix.build_config }} == ${{ vars.RELEASE_CONFIG_NAME_ANDROID }}
        id: cache-android-sdk
        uses: actions/cache@v4
        env:
          cache-name: cache-android-sdk
        with:
          path: /usr/local/lib/android
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          
      - name: Check cache-android-sdk hit
        if: steps.cache-android-sdk.outputs.cache-hit == 'true'
        run: echo "There was a cache-hit for restoring Android SDK."


20/03/2025: Simplified the following in the main workflow to not include Android- and WASM related stuff,
these are not needed for current Chatbot and Desktop projects. WASM is for WebAssembly projects only.  

# Installing SDKs and Frameworks ----------------------------

      - name: Setup .NET Environment
        id: setup-dotnet
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Set up JDK 17
        if: matrix.toplevel_project == vars.ANDROID_TOPLEVEL_PROJECT
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        if: matrix.toplevel_project == vars.ANDROID_TOPLEVEL_PROJECT
        uses: android-actions/setup-android@v3
      
      # Installing all needed workloads irrespective of ANDROID vs. DESKTOP distinction:
      # A single cache is used for 'dotnet' b/c it's too hard to specify workload-specific sub-paths for caching
      - name: Install Workloads
        if: ${{ matrix.toplevel_project == vars.ANDROID_TOPLEVEL_PROJECT || 
          matrix.toplevel_project == vars.DESKTOP_TOPLEVEL_PROJECT }}
        run: dotnet workload install wasm-tools android



The following sequence of steps can determine the default Build-Output-Path for a specified Solution Configuration.
Became obsolete after switching to simple 'Release' and building the top level project only.  

      - name: Build-Output-Path = f(Solution Configuration)
        run: |
          SLN_FILE=$(find . -name '*.sln')
          echo "SLN_FILE: $SLN_FILE"
          TARGET_FRAMEWORK=$(cat Directory.Build.props | grep '<TargetFramework>' | \
            sed -n 's/.*<TargetFramework>\(.*\)<\/TargetFramework>.*/\1/p')
          echo "TARGET_FRAMEWORK: $TARGET_FRAMEWORK"
          DEPLOYMENT_PROJECT_TO_SOLUTION_CONFIG_MATCH_LINE=$(grep -P "${{ matrix.toplevel_project }}.*Deploy.0" $SLN_FILE)
          echo "DEPLOYMENT_PROJECT_TO_SOLUTION_CONFIG_MATCH_LINE: $DEPLOYMENT_PROJECT_TO_SOLUTION_CONFIG_MATCH_LINE"
          DEPLOYMENT_PROJECT_ID=$(echo "$DEPLOYMENT_PROJECT_TO_SOLUTION_CONFIG_MATCH_LINE" | grep -oP "{\K[0-9A-F\-]*(?=})")
          echo "DEPLOYMENT_PROJECT_ID: $DEPLOYMENT_PROJECT_ID"
          DEPLOYMENT_PROJECT_DEFINITION_LINE=$(grep "$DEPLOYMENT_PROJECT_ID" $SLN_FILE | grep "Project(")
          echo "DEPLOYMENT_PROJECT_DEFINITION_LINE: $DEPLOYMENT_PROJECT_DEFINITION_LINE"
          DEPLOYMENT_PROJECT_NAME=$(echo "$DEPLOYMENT_PROJECT_DEFINITION_LINE" | grep -oP '(?<= = ")[^"]*')
          echo "DEPLOYMENT_PROJECT_NAME: $DEPLOYMENT_PROJECT_NAME"
          BUILD_OUTPUT_PATH="Src/$DEPLOYMENT_PROJECT_NAME/bin/${{ matrix.toplevel_project }}/$TARGET_FRAMEWORK/"
          echo "BUILD_OUTPUT_PATH: $BUILD_OUTPUT_PATH"
          echo "BUILD_OUTPUT_PATH=$BUILD_OUTPUT_PATH" >> $GITHUB_ENV
      
Using MSBuild Flag, I can specify a Configuration also for dotnet restore.
Normal --configuration flag as for dotnet build doesn't work!
Don't need it anymore because can include restore step  

      - name: Restore dependencies
        run: dotnet restore /p:Configuration=${{ matrix.toplevel_project }}

